program        → declaration* EOF ;

declaration    → funDecl
               | varDecl
               | classDecl
               | enumDecl
               | statement ;

classDecl     -> "class" IDENTIFIER "{"
                (constructer)?
                (classMembers)* "}";

enumDecl      -> "enum" "{" parameters "}"

classMembers  -> funDecl | varDecl ;

varDecl        → "var" IDENTIFIER ( "=" expression )? ";" ;

funDecl        → "func" function ;
function       → IDENTIFIER "(" parameters? ")" block ;
parameters     → IDENTIFIER ( "," IDENTIFIER )* ;

statement      → exprStmt
               | ifStmt
               | printStmt
               | returnStmt
               | breakStmt
               | returnStmt
               | whileStmt
               | forStmt
               | matchStmt
               | block ;

returnStmt     → "return" expression? ";" ;
continueStmt   → "continue" ";"
breakStmt      → "break" ";"

exprStmt       → expression ";" ;
ifStmt         → "if" expression "then" statement
                ("elif" expression "then statement)*
               ( "else" statement )? ;
printStmt      → "print" expression ";"
               | "println" expression ";" ;
whileStmt      → "while" expression "do" statement ;

forStmt        → "for" IDENTIFIER "," IDENTIFIER  "in" expression "do" statement ;

matchStmt      → "match" expression "with"
               ("case" expression "->" statement)*
               ("else" "->" statement)? ;

block          → "{" declaration* "}" ;

expression     → assignment ;
assignment     → IDENTIFIER ("="|"+="|"-="|"*="|"/="|"%=") assignment
               | logic_or ;
lambda         → "lamda" (parameters)? "->" expression ;
ternary        → expression "if" expression "else" expression ;
logic_or       → logic_and ( "or" logic_and )* ;
logic_and      → equality ( "and" equality )* ;
equality       → comparison ( ( "!=" | "==" ) comparison )* ;
comparison     → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term           → factor ( ( "-" | "+" ) factor )* ;
factor         → unary ( ( "/" | "*" | "%" ) unary )* ;
unary          → ( "!" | "-" ) unary | call ;
call           → primary ( "(" arguments? ")" )* ;
subscript      → primary ( "[" expression "]" )*
member_accsses → IDENTIFIER ("." IDENTIFIER)*
arguments      → expression ( "," expression )* ;
primary        → NUMBER | STRING | "true" | "false" | "nil"
               | "(" expression ")"
               | IDENTIFIER
               | index
               | ListLiteral
               | DictLiteral

index          → (list | string | Dict) "[" expression "]"

ListLiteral    → "[" (ListContents)? "]" ;
ListContents   →  expression ("," expression)* ;

DictLiteral    → "{" (DictContents)? "}" ;
DictContents   → keyValuePair ("," keyValuePair)* ;
keyValuePair   → expression ":" expression ;