#########################
#LEXER
#########################

class Lexer {
    var pos = 0;
    var source;
    var tokens;
    var current;

    func _init(source){
        self.source = source;
        pos = -1;
        advance();
        tokens = List();
    }

    func lex(){

        while current != "\0" do {

            # Ignore whitespace:
            if current == " " then
                advance();
            
            else if current == "+" then
                add_token(TT_PLUS, "+");
            else if current == "-" then
                add_token(TT_MINUS, "-");
                
            else if(isNumeric(current)) then {
                make_number();
            }
            
        }

        var end_token = Token(TT_EOF, "EOF");
        tokens.add(end_token);
        return tokens;
    }

    func advance(){
        if pos + 1 >= len(source) then{
            pos = pos + 1;
            current = "\0";
        }
        else{
            pos = pos + 1;
            current = getChar(pos, source);
        }
        
    }

    func peek_next(){
        if pos + 1 >= len(source) then
            return "\0";
        return getChar(pos + 1, source);
    }

    func add_token(type, value){
        var token = Token(type, value);
        tokens.add(token);
        advance();
    }

    func make_number(){
        var number_string = "";
        while isNumeric(current) do {
            number_string = number_string + current;
            advance();
        }
        add_token(TT_NUMBER, num(number_string));
    }

}

#########################
#TOKENS AND TOKEN TYPES
#########################

var TT_NUMBER = 0;
var TT_PLUS = 1;
var TT_MINUS = 2;
var TT_MULTIPLY = 3;
var TT_DIV = 4;
var TT_L_PAREN = 5;
var TT_R_PAREN = 6;
var TT_EOF;

class Token {
    var type;
    var value;

    func _init(type, value){
        self.type = type;
        self.value = value;
    }

    func _toString(){
        return str(value);
    }

}

#########################
#ENTRY POINT
#########################

while true do {
    var source = input("> ");
    var lexer = Lexer(source);
    var tokens = lexer.lex();
    println tokens;
}
